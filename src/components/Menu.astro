---
import SelectLanguage from "./SelectLanguage.astro";

import { getI18N } from "../i18n";
const i18n = getI18N(Astro.currentLocale);

const menu = [
  { href: "#program", text: i18n.program.title, target: "_self" },
  { href: "#speakers", text: i18n.speakers.title, target: "_self" },
  { href: "#gallery", text: i18n.gallery.title, target: "_self" },
  {
    href: "https://hfmexico.mx/foro-nearshoring/", 
    text: i18n.edition_2023,
    target: "_blank",
  },
];
---

<nav
  id="header"
  class="fixed top-0 w-screen flex justify-between px-5 lg:px-10 py-3 items-center text-black z-30 bg-white border-b-[1px]"
>
  <a class="flex gap-1 items-center" href="#">
    <img src="/assets/logos.webp" alt="favicon" class="w-auto h-8 lg:h-10" />
  </a>
  <div id="menu" class="cursor-pointer lg:hidden text-black">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      fill="none"
      viewBox="0 0 24 24"
      stroke-width="1.5"
      stroke="currentColor"
      class="size-6"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"></path>
    </svg>
  </div>
  <ul
    class="fixed lg:relative top-14 lg:top-0 left-0 bg-white lg:bg-transparent flex flex-col lg:flex-row lg:items-center gap-2 lg:gap-5 lg:text-lg z-20 w-full lg:w-fit py-5 lg:py-0 px-10 rounded-b-xl lg:rounded-b-none border-[1px] lg:border-none border-t-black"
  >
    {
      menu.map((link) => (
        <li class="pl-1 lg:pl-0">
          <a
            href={link.href}
            target={link.target}
            class="relative lg:after:w-0 lg:hover:after:w-full lg:after:h-[1px] lg:hover:after:bg-black lg:after:absolute lg:after:-bottom-2 lg:after:left-0 lg:after:rounded-lg lg:after:transition-all lg:after:duration-300 lg:after:ease-in-out text-nowrap"
          >
            {link.text}
          </a>
        </li>
      ))
    }
    <li>
      <a
        href="#register"
        class="relative inline-flex items-center justify-center px-8 py-3 overflow-hidden font-medium transition duration-300 ease-out rounded-xl lg:rounded-full shadow-md group"
      >
        <span
          class="absolute inset-0 flex items-center justify-center w-full h-full text-white duration-300 -translate-x-full group-hover:translate-x-0 ease bg-primary"
        >
          <svg
            class="w-4 h-4 rotate-90"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
            xmlns="http://www.w3.org/2000/svg"
            ><path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M14 5l7 7m0 0l-7 7m7-7H3"></path></svg
          >
        </span>
        <span
          class="text-xl font-medium absolute flex items-center justify-center w-full h-full text-white transition-all duration-300 transform group-hover:translate-x-full ease bg-primary"
          >{i18n.register.title}</span
        >
        <span class="relative invisible">{i18n.register.title}</span>
      </a>
    </li>
    <li>
      <SelectLanguage />
    </li>
  </ul>
</nav>

<script>
  const menu = document.querySelector("#menu") as HTMLElement;
  const anchors = document.querySelectorAll('a[href^="#"]') as NodeListOf<HTMLAnchorElement>;
  const ul = document.querySelector("nav ul") as HTMLUListElement;
  let isMenuOpen = false;

  const hide = () => {
    ul.style.display = "none";
    isMenuOpen = false;
  };

  const addListeners = () => {
    if (window.innerWidth < 1024) {
      hide();
      menu.addEventListener("click", () => {
        if (isMenuOpen) {
          hide();
        } else {
          ul.style.display = "flex";
          isMenuOpen = true;
        }
      });
      ul.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName !== "UL") return;
        hide();
      });
      anchors.forEach((anchor) => {
        anchor.addEventListener("click", hide);
      });
    } else {
      ul.style.display = "flex";
      anchors.forEach((anchor) => {
        anchor.removeEventListener("click", hide);
      });
    }
  };
  addListeners();
  window.addEventListener("resize", addListeners);
</script>

<script>
  const anchors = document.querySelectorAll('a[href^="#"]');
  const navbar = document.querySelector("nav");

  const navbarHeight = navbar ? navbar.getBoundingClientRect().height : 0;
  anchors.forEach((anchor) => {
    anchor.addEventListener("click", (e) => {
      e.preventDefault();

      const anchor = e.currentTarget as HTMLAnchorElement;
      const id = anchor.getAttribute("href")?.split("#")[1];
      const target = document.getElementById(id || "");
      const targetPosition = target
        ? target.getBoundingClientRect().top + window.scrollY
        : 0;

      window.scroll({
        top: targetPosition - navbarHeight,
        behavior: "smooth",
      });
    });
  });
</script>
